The ``1-my_list`` module
========================

Using ``MyList``
------------------------

Tests for importing the function from module:
    >>> MyList = __import__('1-my_list').MyList

Tests for module docstring:
    >>> mod = __import__('1-my_list').__doc__
    >>> len(mod) >1
    True

Tests for class docstring:
    >>> cls = __import__('1-my_list').MyList.__doc__
    >>> len(cls) > 1
    True

Tests for method docstring:
    >>> met = __import__('1-my_list').MyList.print_sorted.__doc__
    >>> len(met) > 1
    True

Tests if MyList inherits from list:
    >>> issubclass(MyList, list)
    True

Test for an empty list:
    >>> lis = MyList()
    >>> lis.print_sorted()
    []

Test for a list already sorted in an asceding order:
    >>> lis.append(1)
    >>> lis.append(2)
    >>> lis.append(3)
    >>> print(lis)
    [1, 2, 3]

Test for reversed order:
    >>> l = MyList()
    >>> l.append(3)
    >>> l.append(2)
    >>> l.append(1)
    >>> print(l)
    [3, 2, 1]
    >>> l.print_sorted()
    [1, 2, 3]
    >>> print(l)
    [3, 2, 1]

Test for non number elements:
    >>> l = MyList()
    >>> l.append('a')
    >>> l.append('b')
    >>> l.append('c')
    >>> print(l)
    ['a', 'b', 'c']

Test for reversed order of non numbers elements:
    >>> l = MyList()
    >>> l.append('c')
    >>> l.append('b')
    >>> l.append('a')
    >>> print(l)
    ['c', 'b', 'a']
    >>> l.print_sorted()
    ['a', 'b', 'c']

Test for mixed elements (numbers and characters):
    >>> l = MyList()
    >>> l.append(1)
    >>> l.append(2)
    >>> l.append(3)
    >>> l.append('a')
    >>> l.append('c')
    >>> l.append('b')
    >>> print(l)
    [1, 2, 3, 'a', 'c', 'b']

Test for strings:
    >>> my_list = MyList()
    >>> my_list.append("Hello")
    >>> my_list.append("world")
    >>> my_list.append("Python")
    >>> my_list.append("is")
    >>> my_list.append("cool")
    >>> print(my_list)
    ['Hello', 'world', 'Python', 'is', 'cool']